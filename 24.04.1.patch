diff --git a/apex/contrib/csrc/nccl_allocator/NCCLAllocator.cpp b/apex/contrib/csrc/nccl_allocator/NCCLAllocator.cpp
index 1c4a705..305b760 100644
--- a/apex/contrib/csrc/nccl_allocator/NCCLAllocator.cpp
+++ b/apex/contrib/csrc/nccl_allocator/NCCLAllocator.cpp
@@ -432,4 +432,12 @@ void NCCLAllocator::copy_data(void* dest, const void* src, std::size_t count)
       cudaMemcpy(dest, src, count, cudaMemcpyKind::cudaMemcpyDeviceToDevice));
 }
 
+c10::cuda::CUDACachingAllocator::ShareableHandle NCCLAllocator::
+    shareIpcHandle(void* ptr) {
+  TORCH_CHECK(
+      false,
+      "CUDAPluggableAllocator does not yet support shareIPcHandle. "
+      "If you need it, please file an issue describing your use case.");
+}
+
 } // namespace nccl_allocator::cuda
diff --git a/apex/contrib/csrc/nccl_allocator/NCCLAllocator.h b/apex/contrib/csrc/nccl_allocator/NCCLAllocator.h
index 3a4e76b..6bef70a 100644
--- a/apex/contrib/csrc/nccl_allocator/NCCLAllocator.h
+++ b/apex/contrib/csrc/nccl_allocator/NCCLAllocator.h
@@ -85,6 +85,7 @@ struct NCCLAllocator
       bool p2p_enabled) override;
   std::string name() override;
   void copy_data(void* dest, const void* src, std::size_t count) const;
+  c10::cuda::CUDACachingAllocator::ShareableHandle shareIpcHandle(void*) override;
 
  protected:
   std::function<void(int)> init_fn_;
